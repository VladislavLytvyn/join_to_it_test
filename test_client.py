"""
–¢–µ—Å—Ç–æ–≤–∏–π WebSocket –∫–ª—ñ—î–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python test_client.py
"""

import asyncio
import sys
from datetime import datetime

try:
    import websockets
except ImportError:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞: websockets –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install websockets")
    sys.exit(1)


async def test_websocket_client(client_id: str, duration: int = 60):
    """
    –¢–µ—Å—Ç–æ–≤–∏–π WebSocket –∫–ª—ñ—î–Ω—Ç
    
    Args:
        client_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–ª—ñ—î–Ω—Ç–∞
        duration: –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    uri = f"ws://localhost:8000/ws/{client_id}"
    
    print(f"üîå [{client_id}] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {uri}...")
    
    try:
        async with websockets.connect(uri) as websocket:
            print(f"‚úÖ [{client_id}] –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            greeting = await websocket.recv()
            print(f"üì® [{client_id}] {greeting}")
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            test_message = f"–ü—Ä–∏–≤—ñ—Ç –∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}!"
            await websocket.send(test_message)
            print(f"üì§ [{client_id}] –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {test_message}")
            
            # –°–ª—É—Ö–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º –≤–∫–∞–∑–∞–Ω–æ–≥–æ —á–∞—Å—É
            start_time = asyncio.get_event_loop().time()
            
            while True:
                try:
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–ª–∏—à–∫–æ–≤–∏–π —á–∞—Å
                    elapsed = asyncio.get_event_loop().time() - start_time
                    remaining = duration - elapsed
                    
                    if remaining <= 0:
                        print(f"‚è∞ [{client_id}] –ß–∞—Å —Ä–æ–±–æ—Ç–∏ ({duration}s) –≤–∏—á–µ—Ä–ø–∞–Ω–æ")
                        break
                    
                    # –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
                    message = await asyncio.wait_for(
                        websocket.recv(), 
                        timeout=min(remaining, 5.0)
                    )
                    
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    print(f"üì® [{client_id}] [{timestamp}] {message}")
                    
                except asyncio.TimeoutError:
                    # –¢–∞–π–º–∞—É—Ç - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å–ª—É—Ö–∞—Ç–∏
                    continue
                    
                except websockets.exceptions.ConnectionClosed:
                    print(f"üîå [{client_id}] –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                    break
                    
    except websockets.exceptions.WebSocketException as e:
        print(f"‚ùå [{client_id}] WebSocket –ø–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        print(f"‚ùå [{client_id}] –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        print(f"üëã [{client_id}] –í—ñ–¥–∫–ª—é—á–µ–Ω–æ")


async def test_multiple_clients(num_clients: int = 3, duration: int = 60):
    """
    –ó–∞–ø—É—Å–∫–∞—î –∫—ñ–ª—å–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è broadcasting
    
    Args:
        num_clients: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤
        duration: –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    print(f"üöÄ –ó–∞–ø—É—Å–∫ {num_clients} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
    print(f"‚è±Ô∏è  –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏: {duration} —Å–µ–∫—É–Ω–¥")
    print("=" * 60)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    tasks = []
    for i in range(num_clients):
        client_id = f"test_client_{i+1}"
        task = asyncio.create_task(test_websocket_client(client_id, duration))
        tasks.append(task)
        
        # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º–∏
        await asyncio.sleep(0.5)
    
    # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    await asyncio.gather(*tasks, return_exceptions=True)
    
    print("=" * 60)
    print(f"‚úÖ –í—Å—ñ {num_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–æ–±–æ—Ç—É")


async def interactive_client():
    """
    –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    """
    client_id = f"interactive_client_{datetime.now().strftime('%H%M%S')}"
    uri = f"ws://localhost:8000/ws/{client_id}"
    
    print(f"üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {uri}...")
    print("üí° –í–≤–µ–¥—ñ—Ç—å 'quit' –¥–ª—è –≤–∏—Ö–æ–¥—É")
    print("=" * 60)
    
    async with websockets.connect(uri) as websocket:
        print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —è–∫ {client_id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        greeting = await websocket.recv()
        print(f"üì® {greeting}\n")
        
        async def receive_messages():
            """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
            try:
                while True:
                    message = await websocket.recv()
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    print(f"\nüì® [{timestamp}] {message}")
                    print("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ", end="", flush=True)
            except websockets.exceptions.ConnectionClosed:
                print("\nüîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        receive_task = asyncio.create_task(receive_messages())
        
        try:
            # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            while True:
                # –ß–∏—Ç–∞—î–º–æ –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                message = await asyncio.get_event_loop().run_in_executor(
                    None, 
                    input, 
                    "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "
                )
                
                if message.strip().lower() == 'quit':
                    print("üëã –í–∏—Ö—ñ–¥...")
                    break
                
                if message.strip():
                    await websocket.send(message)
                    
        except KeyboardInterrupt:
            print("\nüëã –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        finally:
            receive_task.cancel()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É"""
    print("‚ïî" + "=" * 58 + "‚ïó")
    print("‚ïë" + " " * 10 + "WebSocket –¢–µ—Å—Ç–æ–≤–∏–π –ö–ª—ñ—î–Ω—Ç" + " " * 23 + "‚ïë")
    print("‚ïö" + "=" * 58 + "‚ïù")
    print()
    print("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("  1. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç (–º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
    print("  2. –û–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç (60 —Å–µ–∫—É–Ω–¥)")
    print("  3. –¢—Ä–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ (60 —Å–µ–∫—É–Ω–¥)")
    print("  4. –ü'—è—Ç—å —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ (120 —Å–µ–∫—É–Ω–¥)")
    print("  5. Stress test: 10 –∫–ª—ñ—î–Ω—Ç—ñ–≤ (300 —Å–µ–∫—É–Ω–¥)")
    print()
    
    choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1-5): ").strip()
    
    try:
        if choice == "1":
            asyncio.run(interactive_client())
        elif choice == "2":
            asyncio.run(test_websocket_client("test_client_1", duration=60))
        elif choice == "3":
            asyncio.run(test_multiple_clients(num_clients=3, duration=60))
        elif choice == "4":
            asyncio.run(test_multiple_clients(num_clients=5, duration=120))
        elif choice == "5":
            print("\n‚ö†Ô∏è  STRESS TEST: 10 –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤–∏–ª–∏–Ω")
            confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ").strip().lower()
            if confirm == 'y':
                asyncio.run(test_multiple_clients(num_clients=10, duration=300))
            else:
                print("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\nüëã –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

